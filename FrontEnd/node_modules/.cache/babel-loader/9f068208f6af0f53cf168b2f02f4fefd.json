{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge; // The default allowed delta for keyframe distance\n\nvar keyframeDistance = 10;\nvar defaultNormalizedFrames = {\n  'from': 'from',\n  '0%': 'from',\n  'to': 'to',\n  '100%': 'to'\n};\n/**\r\n * Takes an array of strings representing transform values and\r\n * merges them. Ignores duplicates and 'none'.\r\n * @param {Array} transforms Array<string>\r\n * @returns {String} merged\r\n * @private\r\n * @example\r\n * mergeTransforms([\r\n *   'translateX(10px)',\r\n *   'rotateX(120deg)',\r\n *   'translateX(10px)',\r\n *   'none',\r\n * ])\r\n * // -> 'translateX(10px) rotateX(120deg)'\r\n *\r\n */\n\nvar mergeTransforms = function mergeTransforms(transforms) {\n  var filtered = transforms.filter(function (transform, i) {\n    return transform !== 'none' && transforms.indexOf(transform) === i;\n  });\n  return filtered.join(' ');\n};\n/**\r\n * Returns whichever value is actually defined\r\n * @param {String|Number} primary CSSValue\r\n * @param {String|Number} secondary CSSValue\r\n * @returns {String|Number} defined CSSValue\r\n * @private\r\n */\n\n\nvar getDefined = function getDefined(primary, secondary) {\n  return typeof primary !== 'undefined' ? primary : secondary;\n};\n/**\r\n * Takes a source animation and the current cache, populating the\r\n * cache with the normalized keyframes and returning a copy of the\r\n * source animation with the normalized keyframes as well.\r\n *\r\n * It uses keyframeDistance to determine how much it should normalize\r\n * frames.\r\n * @param {Object} source Animation\r\n * @param {Object} cache FrameMap\r\n * @returns {Object} Animation\r\n * @private\r\n */\n\n\nvar normalizeFrames = function normalizeFrames(source, cache) {\n  var normalized = {};\n\n  for (var frame in source) {\n    var normalizedFrame = defaultNormalizedFrames[frame] || Math.round(parseFloat(frame) / keyframeDistance) * keyframeDistance + '%';\n    normalized[normalizedFrame] = source[frame];\n    cache[normalizedFrame] = normalizedFrame;\n  }\n\n  return normalized;\n};\n\nvar mergeFrames = function mergeFrames(primaryFrame, secondaryFrame, target) {\n  // Walk through all properties in the primary frame\n  for (var propertyName in primaryFrame) {\n    // Transform is special cased, as we want to combine both\n    // transforms when posssible.\n    if (propertyName === 'transform') {\n      // But we dont need to do anything if theres no other\n      // transform to merge.\n      if (secondaryFrame[propertyName]) {\n        var newTransform = mergeTransforms([primaryFrame[propertyName], secondaryFrame[propertyName]]); // We make the assumption that animations use 'transform: none'\n        // to terminate the keyframe. If we're combining two animations\n        // that may terminate at separte frames, its safest to just\n        // ignore this.\n\n        if (newTransform !== 'none') {\n          target[propertyName] = newTransform;\n        }\n      } else {\n        var propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n        target[propertyName] = propertyValue;\n      }\n    } else {\n      // Use a typeof check so we don't ignore falsy values like 0.\n      var _propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n\n      target[propertyName] = _propertyValue;\n    }\n  } // Walk through all properties in the secondary frame.\n  // We should be able to assume that any property that\n  // needed to be merged has already been merged when we\n  // walked the primary frame.\n\n\n  for (var _propertyName in secondaryFrame) {\n    var _propertyValue2 = secondaryFrame[_propertyName]; // Again, ignore 'transform: none'\n\n    if (_propertyName === 'transform' && _propertyValue2 === 'none') {\n      continue;\n    }\n\n    target[_propertyName] = target[_propertyName] || _propertyValue2;\n  }\n};\n\nvar populateDefinedFrame = function populateDefinedFrame(primaryFrame, secondaryFrame) {\n  var definedFrame = primaryFrame || secondaryFrame;\n  var target = {};\n\n  for (var propertyName in definedFrame) {\n    var propertyValue = definedFrame[propertyName]; // Again, ignore 'transform: none'\n\n    if (propertyName === 'transform' && propertyValue === 'none') {\n      continue;\n    }\n\n    target[propertyName] = propertyValue;\n  } // Only define a frame if there are actual styles to apply\n\n\n  if (Object.keys(target).length) {\n    return target;\n  }\n\n  return null;\n};\n/**\r\n * Merge lets you take two Animations and merge them together. It\r\n * iterates through each animation and merges each keyframe. It\r\n * special cases the `transform` property and uses string interop.\r\n * to merge the two transforms.\r\n *\r\n * This is *at your own risk* and will not work with animations\r\n * that are clearly opposites (fadeIn and fadeOut).\r\n *\r\n * @param {Object} primary Animation\r\n * @param {Object} secondary Animation\r\n * @returns {Object} merged Animation\r\n * @example\r\n * import { merge, tada, flip } from 'react-animations';\r\n * const tadaFlip = merge(tada, flip);\r\n */\n\n\nfunction merge(primary, secondary) {\n  // A map used to track the normalized frame value in cases where\n  // two animations contain frames that appear closely, but not exactly\n  var normalizedFrames = {}; // We merge each frame into a new object and return it\n\n  var merged = {};\n  var normalizedPrimary = normalizeFrames(primary, normalizedFrames);\n  var normalizedSecondary = normalizeFrames(secondary, normalizedFrames); // Iterate all normalized frames\n\n  for (var frame in normalizedFrames) {\n    var primaryFrame = normalizedPrimary[frame];\n    var secondaryFrame = normalizedSecondary[frame]; // Create a new frame object if it doesn't exist.\n\n    var target = merged[frame] || (merged[frame] = {}); // If both aniatmions define this frame, merge them carefully\n\n    if (primaryFrame && secondaryFrame) {\n      mergeFrames(primaryFrame, secondaryFrame, target);\n    } else {\n      // Otherwise find the defined frime and populate all properties\\\n      // except for \"transform\" when the value is none.\n      var keyframe = populateDefinedFrame(primaryFrame, secondaryFrame);\n\n      if (keyframe) {\n        merged[frame] = keyframe;\n      }\n    }\n  }\n\n  return merged;\n}","map":{"version":3,"sources":["D:/MyStuff/George Brown/Year 3/2 Semester/CAPSTONE PROJECT 02/Project/test/dasfkljadsf/CapStone-FA/FrontEnd/node_modules/react-animations/lib/merge.js"],"names":["Object","defineProperty","exports","value","default","merge","keyframeDistance","defaultNormalizedFrames","mergeTransforms","transforms","filtered","filter","transform","i","indexOf","join","getDefined","primary","secondary","normalizeFrames","source","cache","normalized","frame","normalizedFrame","Math","round","parseFloat","mergeFrames","primaryFrame","secondaryFrame","target","propertyName","newTransform","propertyValue","_propertyValue","_propertyName","_propertyValue2","populateDefinedFrame","definedFrame","keys","length","normalizedFrames","merged","normalizedPrimary","normalizedSecondary","keyframe"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = merge;\r\n\r\n\r\n// The default allowed delta for keyframe distance\r\nvar keyframeDistance = 10;\r\n\r\nvar defaultNormalizedFrames = {\r\n  'from': 'from',\r\n  '0%': 'from',\r\n  'to': 'to',\r\n  '100%': 'to'\r\n};\r\n\r\n/**\r\n * Takes an array of strings representing transform values and\r\n * merges them. Ignores duplicates and 'none'.\r\n * @param {Array} transforms Array<string>\r\n * @returns {String} merged\r\n * @private\r\n * @example\r\n * mergeTransforms([\r\n *   'translateX(10px)',\r\n *   'rotateX(120deg)',\r\n *   'translateX(10px)',\r\n *   'none',\r\n * ])\r\n * // -> 'translateX(10px) rotateX(120deg)'\r\n *\r\n */\r\nvar mergeTransforms = function mergeTransforms(transforms) {\r\n  var filtered = transforms.filter(function (transform, i) {\r\n    return transform !== 'none' && transforms.indexOf(transform) === i;\r\n  });\r\n  return filtered.join(' ');\r\n};\r\n\r\n/**\r\n * Returns whichever value is actually defined\r\n * @param {String|Number} primary CSSValue\r\n * @param {String|Number} secondary CSSValue\r\n * @returns {String|Number} defined CSSValue\r\n * @private\r\n */\r\nvar getDefined = function getDefined(primary, secondary) {\r\n  return typeof primary !== 'undefined' ? primary : secondary;\r\n};\r\n\r\n/**\r\n * Takes a source animation and the current cache, populating the\r\n * cache with the normalized keyframes and returning a copy of the\r\n * source animation with the normalized keyframes as well.\r\n *\r\n * It uses keyframeDistance to determine how much it should normalize\r\n * frames.\r\n * @param {Object} source Animation\r\n * @param {Object} cache FrameMap\r\n * @returns {Object} Animation\r\n * @private\r\n */\r\nvar normalizeFrames = function normalizeFrames(source, cache) {\r\n  var normalized = {};\r\n  for (var frame in source) {\r\n    var normalizedFrame = defaultNormalizedFrames[frame] || Math.round(parseFloat(frame) / keyframeDistance) * keyframeDistance + '%';\r\n    normalized[normalizedFrame] = source[frame];\r\n    cache[normalizedFrame] = normalizedFrame;\r\n  }\r\n  return normalized;\r\n};\r\n\r\nvar mergeFrames = function mergeFrames(primaryFrame, secondaryFrame, target) {\r\n  // Walk through all properties in the primary frame\r\n  for (var propertyName in primaryFrame) {\r\n    // Transform is special cased, as we want to combine both\r\n    // transforms when posssible.\r\n    if (propertyName === 'transform') {\r\n      // But we dont need to do anything if theres no other\r\n      // transform to merge.\r\n      if (secondaryFrame[propertyName]) {\r\n        var newTransform = mergeTransforms([primaryFrame[propertyName], secondaryFrame[propertyName]]);\r\n        // We make the assumption that animations use 'transform: none'\r\n        // to terminate the keyframe. If we're combining two animations\r\n        // that may terminate at separte frames, its safest to just\r\n        // ignore this.\r\n        if (newTransform !== 'none') {\r\n          target[propertyName] = newTransform;\r\n        }\r\n      } else {\r\n        var propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\r\n        target[propertyName] = propertyValue;\r\n      }\r\n    } else {\r\n      // Use a typeof check so we don't ignore falsy values like 0.\r\n      var _propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\r\n      target[propertyName] = _propertyValue;\r\n    }\r\n  }\r\n  // Walk through all properties in the secondary frame.\r\n  // We should be able to assume that any property that\r\n  // needed to be merged has already been merged when we\r\n  // walked the primary frame.\r\n  for (var _propertyName in secondaryFrame) {\r\n    var _propertyValue2 = secondaryFrame[_propertyName];\r\n    // Again, ignore 'transform: none'\r\n    if (_propertyName === 'transform' && _propertyValue2 === 'none') {\r\n      continue;\r\n    }\r\n    target[_propertyName] = target[_propertyName] || _propertyValue2;\r\n  }\r\n};\r\n\r\nvar populateDefinedFrame = function populateDefinedFrame(primaryFrame, secondaryFrame) {\r\n  var definedFrame = primaryFrame || secondaryFrame;\r\n  var target = {};\r\n  for (var propertyName in definedFrame) {\r\n    var propertyValue = definedFrame[propertyName];\r\n    // Again, ignore 'transform: none'\r\n    if (propertyName === 'transform' && propertyValue === 'none') {\r\n      continue;\r\n    }\r\n    target[propertyName] = propertyValue;\r\n  }\r\n  // Only define a frame if there are actual styles to apply\r\n  if (Object.keys(target).length) {\r\n    return target;\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Merge lets you take two Animations and merge them together. It\r\n * iterates through each animation and merges each keyframe. It\r\n * special cases the `transform` property and uses string interop.\r\n * to merge the two transforms.\r\n *\r\n * This is *at your own risk* and will not work with animations\r\n * that are clearly opposites (fadeIn and fadeOut).\r\n *\r\n * @param {Object} primary Animation\r\n * @param {Object} secondary Animation\r\n * @returns {Object} merged Animation\r\n * @example\r\n * import { merge, tada, flip } from 'react-animations';\r\n * const tadaFlip = merge(tada, flip);\r\n */\r\nfunction merge(primary, secondary) {\r\n  // A map used to track the normalized frame value in cases where\r\n  // two animations contain frames that appear closely, but not exactly\r\n  var normalizedFrames = {};\r\n\r\n  // We merge each frame into a new object and return it\r\n  var merged = {};\r\n\r\n  var normalizedPrimary = normalizeFrames(primary, normalizedFrames);\r\n\r\n  var normalizedSecondary = normalizeFrames(secondary, normalizedFrames);\r\n\r\n  // Iterate all normalized frames\r\n  for (var frame in normalizedFrames) {\r\n    var primaryFrame = normalizedPrimary[frame];\r\n    var secondaryFrame = normalizedSecondary[frame];\r\n    // Create a new frame object if it doesn't exist.\r\n    var target = merged[frame] || (merged[frame] = {});\r\n\r\n    // If both aniatmions define this frame, merge them carefully\r\n    if (primaryFrame && secondaryFrame) {\r\n      mergeFrames(primaryFrame, secondaryFrame, target);\r\n    } else {\r\n      // Otherwise find the defined frime and populate all properties\\\r\n      // except for \"transform\" when the value is none.\r\n      var keyframe = populateDefinedFrame(primaryFrame, secondaryFrame);\r\n      if (keyframe) {\r\n        merged[frame] = keyframe;\r\n      }\r\n    }\r\n  }\r\n  return merged;\r\n}"]},"metadata":{},"sourceType":"script"}